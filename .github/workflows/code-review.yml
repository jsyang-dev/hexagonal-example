name: 코드 리뷰

on:
  issue_comment:
    types: [created]

jobs:
  code-review:
    if: |
      github.event.issue.pull_request != null &&
      contains(github.event.comment.body, '#코드리뷰')
    runs-on: ubuntu-latest

    steps:
      - name: 마지막 커밋의 SHA 가져오기
        id: get-sha
        run: |
          SHA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }} \
            | jq -r '.head.sha')
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Check Run 생성 (pending)
        id: create-check
        uses: actions/github-script@v7
        with:
          script: |
            const check = await github.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "코드 리뷰",
              head_sha: "${{ steps.get-sha.outputs.sha }}",
              status: "in_progress",
              started_at: new Date().toISOString(),
              output: {
                title: "코드 리뷰 진행 중",
                summary: "코드 리뷰를 실행하고 있습니다."
              }
            });
            core.setOutput("check_id", check.data.id);

      - name: n8n 워크플로우 호출
        id: call-n8n
        run: |
          response=$(curl -s -X POST https://8013-116-33-11-45.ngrok-free.app/webhook/ec464db8-8d7b-47d6-bef3-b19a2aa7f045 \
            -H "Content-Type: application/json" \
            -d '{
              "owner": "${{ github.repository_owner }}",
              "repo": "${{ github.event.repository.name }}",
              "pullNumber": "${{ github.event.issue.number }}"
            }')

          echo "$response" > result.json

      - name: 코드 리뷰 결과 출력
        run: cat result.json

      - name: 라인별 코멘트 작성
        run: |
          if [ ! -s result.json ]; then
            echo "result.json is empty! Skipping comments."
            exit 0
          fi

          count=$(jq '.reviews | length' result.json)
          if [ "$count" -eq 0 ]; then
            echo "리뷰가 없습니다. 종료합니다."
            exit 0
          fi

          jq -c '.reviews[]' result.json | while read -r review; do
            file=$(echo "$review" | jq -r '.file')
            line=$(echo "$review" | jq -r '.line')
            comment=$(echo "$review" | jq -r '.comment')
            sha="${{ steps.get-sha.outputs.sha }}"

            echo "➤ Posting comment on $file:$line"

            json=$(jq -n \
              --arg commit_id "$sha" \
              --arg path "$file" \
              --arg side "RIGHT" \
              --arg body "$comment" \
              --argjson line "$line" \
              '{body: $body, commit_id: $commit_id, path: $path, side: $side, line: $line}'
            )

            echo "📤 Request JSON:"
            echo "$json"

            response=$(curl -s -w "\n🟢 HTTP %{http_code}\n" -X POST https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}/comments \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$json")

            echo "📥 GitHub Response:"
            echo "$response"
          done

      # ---- 성공 시 Check Run 완료 (success) ----
      - name: Check Run 완료 (success)
        if: ${{ success() }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ steps.create-check.outputs.check_id }},
              status: "completed",
              conclusion: "success",
              completed_at: new Date().toISOString(),
              output: {
                title: "코드 리뷰 완료",
                summary: "코드 리뷰가 성공적으로 끝났습니다."
              }
            });

      # ---- 실패 시 Check Run 완료 (failure) ----
      - name: Check Run 완료 (failure)
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ steps.create-check.outputs.check_id }},
              status: "completed",
              conclusion: "failure",
              completed_at: new Date().toISOString(),
              output: {
                title: "코드 리뷰 실패",
                summary: "코드 리뷰 도중 오류가 발생했습니다."
              }
            });
